# (chiSqCritical <- qchisq(p = 0.05, df = df, lower.tail = FALSE))
(pVal <- pchisq(q=chiSqObserved, df=df, lower.tail = FALSE))
glimpse(fishDat)
fishDat %>% select(population,strain,dose) %>% table()
nFish <- nrow(fishDat)
StrainInfectionCrosstab <- fishDat %>%
select(strain,infection) %>%
table()
StrainInfectionCrosstab
# (piHatStrain <- rowSums(StrainInfectionCrosstab)/nFish)
# (piHatInfection <- colSums(StrainInfectionCrosstab)/nFish)
# (piHatJoint <- piHatStrain %o% piHatInfection)
(Expected_jk <- nFish*piHatJoint)
# StrainInfectionCrosstab - Expected_jk
(zSquared <- (StrainInfectionCrosstab - Expected_jk)^2/Expected_jk)
(chiSqObserved <- sum(zSquared))
(df <- prod( dim(StrainInfectionCrosstab)-1))
# (chiSqCritical <- qchisq(p = 0.05, df = df, lower.tail = FALSE))
(pVal <- pchisq(q=chiSqObserved, df=df, lower.tail = FALSE))
fishDat %>% select(population,strain,dose) %>% table()
nFish <- nrow(fishDat)
StrainInfectionCrosstab <- fishDat %>%
select(strain,infection) %>%
table()
StrainInfectionCrosstab
(Expected_jk <- nFish*piHatJoint)
(zSquared <- (StrainInfectionCrosstab - Expected_jk)^2/Expected_jk)
(chiSqObserved <- sum(zSquared))
(df <- prod( dim(StrainInfectionCrosstab)-1))
(pVal <- pchisq(q=chiSqObserved, df=df, lower.tail = FALSE))
fishDat %>% select(population,strain,dose) %>% table()
nFish <- nrow(fishDat)
StrainInfectionCrosstab <- fishDat %>%
select(strain,infection) #%>%
#table()
StrainInfectionCrosstab
Expected_jk <- nFish*piHatJoint
zSquared <- (StrainInfectionCrosstab - Expected_jk)^2/Expected_jk
fishDat %>% select(population,strain,dose) %>% table()
nFish <- nrow(fishDat)
StrainInfectionCrosstab <- fishDat %>%
select(strain,infection) %>%
table()
StrainInfectionCrosstab
Expected_jk <- nFish*piHatJoint
zSquared <- (StrainInfectionCrosstab - Expected_jk)^2/Expected_jk
chiSqObserved <- sum(zSquared)
df <- prod( dim(StrainInfectionCrosstab)-1)
(pVal <- pchisq(q=chiSqObserved, df=df, lower.tail = FALSE))
StrainInfectionCrosstab <- fishDat %>%
select(strain,infection) %>%
table()
StrainInfectionCrosstab
Expected_jk <- nFish*piHatJoint
zSquared <- (StrainInfectionCrosstab - Expected_jk)^2/Expected_jk
chiSqObserved <- sum(zSquared)
df <- prod( dim(StrainInfectionCrosstab)-1)
(pVal <- pchisq(q=chiSqObserved, df=df, lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = abs(z_obs), lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = z_obs, lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = z_obs, lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = z_obs, lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = z_obs, lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = z_obs, lower.tail = FALSE))
(pValZtest <- 2*pnorm(q = abs(z_obs), lower.tail = FALSE))
(pVal <- 2*pnorm(q = abs(z_obs), lower.tail = FALSE))
fishDat %>% ggplot(aes(x=factor(endemic), y=log.viral.load)) +
geom_boxplot()
fishDat %>% group_by(endemic) %>%
summarize(
mean = mean(log.viral.load, na.rm=TRUE),
sd = sd(log.viral.load, na.rm=TRUE)
)
t.test(
# viral loads for fish exposed to L:
x = fishDat$log.viral.load[fishDat$endemic == 0],
# viral loads for fish exposed to U or M:
y = fishDat$log.viral.load[fishDat$endemic == 1]
)
anova(lm(formula = log.viral.load ~ strain, data = fishDat))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(ggplot2)
fishDat <- read.csv(
file = "https://raw.githubusercontent.com/brownwuw/UW_STAT311_AU22/main/HernandezData.csv"
)
fishDat %>% ggplot() +
geom_boxplot(aes(x=strain, y=log.viral.load)) +
ylim(
min(fishDat$log.viral.load, na.rm=TRUE),
max(fishDat$log.viral.load, na.rm=TRUE)
)
fishDat %>% ggplot() +
geom_boxplot(aes(x=population, y=log.viral.load)) +
ylim(
min(fishDat$log.viral.load, na.rm=TRUE),
max(fishDat$log.viral.load, na.rm=TRUE)
)
fishDat %>% ggplot() +
geom_boxplot(aes(x=as.factor(dose), y=log.viral.load)) +
ylim(
min(fishDat$log.viral.load, na.rm=TRUE),
max(fishDat$log.viral.load, na.rm=TRUE)
)
fishDat %>% ggplot() +
geom_boxplot(aes(x="All", y=log.viral.load)) +
ylim(
min(fishDat$log.viral.load, na.rm=TRUE),
max(fishDat$log.viral.load, na.rm=TRUE)
) +
theme(axis.title.x=element_blank())
fishDat <- fishDat %>%
mutate(endemic = ifelse(strain == "u" | strain == "m", 1, 0))
round(fishDat %>% select(infection, endemic) %>%
table() %>% prop.table(margin = 2), 4)
(p_pooled <- mean(fishDat$infection))
p_treatment <- fishDat %>% group_by(endemic) %>%
summarize(
p_treatment = mean(infection),
n_treatment = n()
)
p_treatment
(Delta.p <- p_treatment$p_treatment[1] - p_treatment$p_treatment[2])
SE_Delta.p <- sqrt(
sum(p_pooled*(1-p_pooled)/p_treatment$n_treatment)
)
(z_obs <- Delta.p/SE_Delta.p)
(pValZtest <- 2*pnorm(q = abs(z_obs), lower.tail = FALSE))
fishDat %>% ggplot(aes(x=factor(endemic), y=log.viral.load)) +
geom_boxplot()
fishDat %>% group_by(endemic) %>%
summarize(
mean = mean(log.viral.load, na.rm=TRUE),
sd = sd(log.viral.load, na.rm=TRUE)
)
t.test(
# viral loads for fish exposed to L:
x = fishDat$log.viral.load[fishDat$endemic == 0],
# viral loads for fish exposed to U or M:
y = fishDat$log.viral.load[fishDat$endemic == 1]
)
anova(lm(formula = log.viral.load ~ strain, data = fishDat))
knitr::opts_chunk$set(echo = TRUE)
a <- 2^10
b <- 10^3
a > b
knitr::opts_chunk$set(echo = TRUE)
a <- 2^10
b <- 10^3
a > b
knitr::opts_chunk$set(echo = TRUE)
a <- 2^10
b <- 10^3
a > b
x <- sqrt(2)
knitr::opts_chunk$set(echo = TRUE)
a <- 2^10
b <- 10^3
a > b
x <- sqrt(2)
x
## Create a variable `max_puppies`, which is the number of puppies you can
## afford for $1K.  Compute this in R, not just assign!
## Hint: use integer division %/%
max_puppies <- 1000/total
## Create a variable `total` that has the total cost of all of your
## puppies
total <- 1000
max_puppies
## Create a variable `max_puppies`, which is the number of puppies you can
## afford for $1K.  Compute this in R, not just assign!
## Hint: use integer division %/%
max_puppies = (1000/total)
## Create a variable `max_puppies`, which is the number of puppies you can
## afford for $1K.  Compute this in R, not just assign!
## Hint: use integer division %/%
max_puppies = 1000/total
max_puppies
## Assign your name to the variable `name`
name <- "Reena"
max_puppies
max_puppies
max_puppies
## Create a variable `total` that has the total cost of all of your
## puppies
total <- 1000
total
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat(I_saw_raindrops, my_shoes_are_wet, my_ta_is_soaked)
## Create a boolean variable `too.expensive`, set to true if the cost
## of all puppies you want is greater than $1,000
too.expensive <- FALSE
## Now let's do weather forecast:
## assign 'true' or 'false' to a variable named 'I_saw_raindrops'
I_saw_raindrops <- FALSE
## assign 'true' or 'false' to a variable named 'my_shoes_are_wet'
my_shoes_are_wet <- FALSE
## assign 'true' or 'false' to a variable named 'my_ta_is_soaked'
my_ta_is_soaked <- FALSE
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat(I_saw_raindrops, my_shoes_are_wet, my_ta_is_soaked)
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat((I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat((I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## Now let's do weather forecast:
## assign 'true' or 'false' to a variable named 'I_saw_raindrops'
I_saw_raindrops <- TRUE
## assign 'true' or 'false' to a variable named 'my_shoes_are_wet'
my_shoes_are_wet <- FALSE
## assign 'true' or 'false' to a variable named 'my_ta_is_soaked'
my_ta_is_soaked <- FALSE
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat((I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat((I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## Now let's do weather forecast:
## assign 'true' or 'false' to a variable named 'I_saw_raindrops'
I_saw_raindrops <- FALSE
## assign 'true' or 'false' to a variable named 'my_shoes_are_wet'
my_shoes_are_wet <- FALSE
## assign 'true' or 'false' to a variable named 'my_ta_is_soaked'
my_ta_is_soaked <- FALSE
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat((I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
cat
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat("The chance of rain in Seattle today is ", (I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat("The chance of rain in Seattle today is ",
(I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat("The chance of rain in Seattle today is ",
(I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## Create a variable `hometown` that stores the city in which you were born
hometown <- "Shanghai"
hometown
## Assign your name to the variable `name`
name <- "Reena"
name
## Assign your height to a variable `height`
height <- 169
height
## Create a variable `puppies` equal to the number of puppies you'd like to
## have
puppies <- 1
puppies
## Create a variable `price`, which is how expensive you think a puppy is
price <- 1000
price
## Create a variable `total` that has the total cost of all of your
## puppies
total <- 1000
total
## Create a variable `max_puppies`, which is the number of puppies you can
## afford for $1K.  Compute this in R, not just assign!
## Hint: use integer division %/%
max_puppies <- 1000/total
max_puppies
## 2. ----- Logical variables
## Create a boolean variable `too.expensive`, set to true if the cost
## of all puppies you want is greater than $1,000
too.expensive <- FALSE
too.expensive
## Now let's do weather forecast:
## assign 'true' or 'false' to a variable named 'I_saw_raindrops'
I_saw_raindrops <- FALSE
I_saw_raindrops
## assign 'true' or 'false' to a variable named 'my_shoes_are_wet'
my_shoes_are_wet <- FALSE
my_shoes_are_wet
## assign 'true' or 'false' to a variable named 'my_ta_is_soaked'
my_ta_is_soaked <- FALSE
my_ta_is_soaked
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat("The chance of rain in Seattle today is ",
(I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## Create a variable `hometown` that stores the city in which you were born
hometown <- "Shanghai"
hometown
## Assign your name to the variable `name`
name <- "Reena"
name
## Assign your height to a variable `height`
height <- 169
height
## Create a variable `puppies` equal to the number of puppies you'd like to
## have
puppies <- 1
puppies
## Create a variable `price`, which is how expensive you think a puppy is
price <- 1000
price
## Create a variable `total` that has the total cost of all of your
## puppies
total <- 1000
total
## Create a variable `max_puppies`, which is the number of puppies you can
## afford for $1K.  Compute this in R, not just assign!
## Hint: use integer division %/%
max_puppies <- 1000/total
max_puppies
## 2. ----- Logical variables
## Create a boolean variable `too.expensive`, set to true if the cost
## of all puppies you want is greater than $1,000
too.expensive <- FALSE
too.expensive
## Now let's do weather forecast:
## assign 'true' or 'false' to a variable named 'I_saw_raindrops'
I_saw_raindrops <- FALSE
I_saw_raindrops
## assign 'true' or 'false' to a variable named 'my_shoes_are_wet'
my_shoes_are_wet <- FALSE
my_shoes_are_wet
## assign 'true' or 'false' to a variable named 'my_ta_is_soaked'
my_ta_is_soaked <- FALSE
my_ta_is_soaked
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat("The chance of rain in Seattle today is ",
(I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
## compute chance of rain in Seattle today: add all these three variables and
## divide by 3.  Print the result with an informative message (use `cat()`).
cat("The chance of rain in Seattle today is ",
(I_saw_raindrops + my_shoes_are_wet + my_ta_is_soaked)/3)
source("C:/Users/Reena/Desktop/UW/WI23/INFO201/glab1-yishiz2/lab.R", echo=TRUE)
addThree
return(value + 3)
## Create a variable `height.in.meters` by passing `height.in.feet` to
## your `FeetToMeters` function
height.in.feet <- metersToFeet(height.in.meter)
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("tinytex")
library(dplyr)
setwd("C:/Users/Reena/Desktop/UW/WI23/INFO201/ps5-rmarkdown-yishiz2")
library(dplyr)
read_delim("gapminder.csv")
library(dplyr)
read.delim("gapminder.csv")
library(dplyr)
read.delim("gapminder.csv.bz2")
library(dplyr)
<load the data>
library(dplyr)
# load the data
data <- read.delim("gapminder.csv.bz2")
nrow(data)
nrow(data)
ncol(data)
sample(data)
sample(data, 10)
head(data)
sample(data, 10)
sample(data, 1)
sample(data)
data[sample(nrow(data), 10), ]
sample(nrow(data), 10)
sample(data, 10)
data[sample(data, 10),]
print(sample(data))
sample(data)
## Descriptive Statistics
unique(data)
## Descriptive Statistics
unique(data$region)
## Descriptive Statistics
unique(data$name)
sample(data)
# It looks fine
data$
## Descriptive Statistics
unique(data$name, data$iso2, data$iso3)
data$
## Descriptive Statistics
unique(data$iso2)
data$
## Descriptive Statistics
unique(data$iso3)
data$
## Descriptive Statistics
unique(data$name)
## Descriptive Statistics
unique(data$name)
## Descriptive Statistics
unique(data$iso2)
## Descriptive Statistics
unique(data$iso3)
## Descriptive Statistics
unique(data)
## Descriptive Statistics
unique(data$iso2)
## Descriptive Statistics
unique(data$iso2)
unique(data$name)
## Descriptive Statistics
unique(data$iso2)
unique(data$name)
unique(data$iso3)
length(unique(data$iso2))
length(unique(data$name))
length(unique(data$iso3))
print(data[data$name, data$iso2, data$iso3])
print(data[, data("name", "iso2", "iso3")])
print(data[, c("name", "iso2", "iso3")])
print(unique(data[, c("name", "iso2", "iso3")]))
countries <- unique(data[, c("name", "iso2", "iso3")]))
countries <- unique(data[, c("name", "iso2", "iso3")])
countries <- unique(data[, c("name", "iso2", "iso3")])
nrow(countries)
countries <- unique(data[, c("name", "iso2", "iso3")])
nrow(countries)
length(na.omit(countries$iso2))
countries <- unique(data[, c("name", "iso2", "iso3")])
nrow(countries)
length(na.omit(countries$iso3))
countries <- unique(data[, c("name", "iso2", "iso3")])
nrow(countries)
length(na.omit(countries$name))
countries <- unique(data[, c("name", "iso2", "iso3")])
nrow(countries)
length(na.omit(countries$name))
countries <- unique(data[, c("name", "iso2", "iso3")])
nrow(countries)
length(na.omit(countries$name))
countries <- unique(data[, c("name", "iso2", "iso3")])
countries <- unique(data[, c("name", "iso2", "iso3")])
countries
nrow(countries)
length(na.omit(countries$name))
countries
unique(data$iso3)
countries <- unique(data[, c("name", "iso2", "iso3")])
countries
summarize(data)
sample(data)
length(unique(data$iso2))
length(unique(data$name))
length(unique(data$iso3))
countries <- unique(data[, c("name", "iso2", "iso3")])
ncol(data)
# load the data
```{r, echo=FALSE}
ncol(data)
```
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
data <- read.delim("gapminder.csv.bz2")
nrow(data)
ncol(data)
library(dplyr)
data <- read.delim("gapminder.csv.bz2")
nrow(data)
ncol(data)
sample(data)
length(unique(data$iso2))
length(unique(data$name))
length(unique(data$iso3))
countries <- unique(data[, c("name", "iso2", "iso3")])
length(unique(data$iso2))
length(unique(data$name))
length(unique(data$iso3))
countries <- unique(data[, c("name", "iso2", "iso3")])
length(unique(data$iso2))
length(unique(data$name))
length(unique(data$iso3))
countries <- unique(data[, c("name", "iso2", "iso3")])
countries <- unique(data[, c("name", "iso2", "iso3")])
countries
countries <- unique(data[, c("name", "iso2", "iso3")])
name_iso2 <- unique(data[, c("name", "iso2")])
name_iso2
name_iso2 %>% group_by(iso2) %>% summarise(n_unique = n_distinct(iso2))
name_iso2 %>% group_by(iso2) %>% summarise(n_unique = n_distinct(name))
name_iso2 %>% group_by(name) %>% summarise(n_unique = n_distinct(name))
name_iso2 %>% group_by(iso2) %>% summarise(n_unique = n_distinct(name))
name_iso2 %>% group_by(name) %>% summarise(n_unique = n_distinct(iso2))
name_iso2 %>%
group_by(iso2) %>%
summarise(n_unique = n_distinct(name))
data %>%
group_by(iso2) %>%
summarise(n_unique = n_distinct(name))
countries %>%
group_by(iso2) %>%
summarise(n_unique = n_distinct(name))
countries %>%
group_by(iso2) %>%
summarise(n_unique = n_distinct("name"))
countries %>%
group_by(iso2) %>%
summarise(n_unique = n_distinct(name))
countries %>%
group_by(name) %>%
summarise(n_unique = n_distinct(iso2))
countries %>%
group_by(iso2) %>%
summarise(n_unique = n_distinct(name))
countries <- unique(data[, c("name", "iso2", "iso3")])
countries
